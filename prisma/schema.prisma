// This is your Prisma schema file,
// learn more about it in the docs https//pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["selectRelationCount", "filterJson"]
}

model File {
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(uuid())
  name String
  path String
  Company Company[]
  User    User[]
  Product Product[]
}

model Company {
  id      Int       @id @default(autoincrement())
  uuid    String    @unique @default(uuid())
  name    String    @unique
  fileId  Int
  File    File      @relation(fields: [fileId], references: [id])
  User    User[]
  Product Product[]
}

model User {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @default(uuid())
  name      String
  mail      String   @unique
  salt      String
  tokens    Json
  rounds    Int      @default(10)
  updatedAt DateTime @default(now())
  createdAt DateTime @default(now())
  companyId Int
  fileId    Int
  File      File     @relation(fields: [fileId], references: [id])
  Company   Company  @relation(fields: [companyId], references: [id])
  Log       Log[]
}

model Product {
  id                    Int               @id @default(autoincrement())
  uuid                  String            @unique @default(uuid())
  label                 String
  updatedAt             DateTime          @default(now())
  createdAt             DateTime          @default(now())
  productsValidationsId Int
  ProductsValidations   ProductValidation @relation(fields: [productsValidationsId], references: [id])
  companyId             Int
  Company               Company           @relation(fields: [companyId], references: [id])
  File                  File              @relation(fields: [fileId], references: [id])
  fileId                Int
}

model ProductValidation {
  id         Int       @id @default(autoincrement())
  uuid       String    @unique @default(uuid())
  expiration DateTime  @default(now())
  updatedAt  DateTime  @default(now())
  createdAt  DateTime  @default(now())
  Products   Product[]
}

model Log {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @default(uuid())
  body      Json
  createdAt DateTime @default(now())
  User      User     @relation(fields: [userId], references: [id])
  userId    Int
}

model Laborer {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @default(uuid())
  name      String
  phone     String
  mail      String
  status    Boolean  @default(true)
  updatedAt DateTime @default(now())
  createdAt DateTime @default(now())

  laborerProfileId Int
  LaborerProfile   LaborerProfile @relation(fields: [laborerProfileId], references: [id])
}

model LaborerProfile {
  id          Int       @id @default(autoincrement())
  uuid        String    @unique @default(uuid())
  description String    @unique
  status      Boolean   @default(true)
  updatedAt   DateTime  @default(now())
  createdAt   DateTime  @default(now())
  Laborer     Laborer[]
}
