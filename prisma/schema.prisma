// This is your Prisma schema file,
// learn more about it in the docs https//pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["selectRelationCount", "filterJson"]
}

model File {
  id       Int       @id @default(autoincrement())
  uuid     String    @unique @default(uuid())
  name     String
  path     String
  Company  Company[]
  users    User[]
  products Product[]
}

model Company {
  id       Int       @id @default(autoincrement())
  uuid     String    @unique @default(uuid())
  name     String    @unique
  fileId   Int?
  File     File?     @relation(fields: [fileId], references: [id])
  users    User[]
  products Product[]
}

model User {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @default(uuid())
  name      String
  mail      String   @unique
  salt      String
  rounds    Int      @default(10)
  updatedAt DateTime @default(now())
  createdAt DateTime @default(now())
  tokens    Token[]
  fileId    Int?
  files     File?    @relation(fields: [fileId], references: [id])
  companyId Int
  Company   Company  @relation(fields: [companyId], references: [id])
  logs      Log[]
}

model Token {
  id     Int    @id @default(autoincrement())
  token  String
  User   User?  @relation(fields: [userId], references: [id])
  userId Int?
}

model Product {
  id                Int                 @id @default(autoincrement())
  uuid              String              @unique @default(uuid())
  label             String
  updatedAt         DateTime            @default(now())
  createdAt         DateTime            @default(now())
  ProductValidation ProductValidation[]
  companyId         Int
  Company           Company             @relation(fields: [companyId], references: [id])
  fileId            Int?
  File              File?               @relation(fields: [fileId], references: [id])
}

model ProductValidation {
  id         Int      @id @default(autoincrement())
  uuid       String   @unique @default(uuid())
  expiration DateTime @default(now())
  updatedAt  DateTime @default(now())
  createdAt  DateTime @default(now())
  Product    Product? @relation(fields: [productId], references: [id])
  productId  Int?
}

model Log {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @default(uuid())
  body      Json
  createdAt DateTime @default(now())
  User      User     @relation(fields: [userId], references: [id])
  userId    Int
}

model Laborer {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @default(uuid())
  name      String
  phone     String
  mail      String
  status    Boolean  @default(true)
  updatedAt DateTime @default(now())
  createdAt DateTime @default(now())

  laborerProfileId Int
  LaborerProfile   LaborerProfile @relation(fields: [laborerProfileId], references: [id])
}

model LaborerProfile {
  id          Int       @id @default(autoincrement())
  uuid        String    @unique @default(uuid())
  description String    @unique
  status      Boolean   @default(true)
  updatedAt   DateTime  @default(now())
  createdAt   DateTime  @default(now())
  Laborer     Laborer[]
}
